#pragma once
#include <vector>
#include <string>

class RAM {
	private:
		//Vector to store emulated RAM
		std::vector<unsigned char> memory = std::vector<unsigned char>(4096, 0);

		//Index to start digit sprites data at
		const int DIGIT_SPRITES_INDEX = 0;

		//Index to start ROM data at
		const int ROM_START_INDEX = 0x200;

		//Vector storing sprites of digits 0 - F
		const std::vector<unsigned char> DIGIT_SPRITES = {
			0xF0, 0x90, 0x90, 0x90, 0xF0,
			0x20, 0x60, 0x20, 0x20, 0x70,
			0xF0, 0x10, 0xF0, 0x80, 0xF0,
			0xF0, 0x10, 0xF0, 0x10, 0xF0,
			0x90, 0x90, 0xF0, 0x10, 0x10,
			0xF0, 0x80, 0xF0, 0x10, 0xF0,
			0xF0, 0x80, 0xF0, 0x90, 0xF0,
			0xF0, 0x10, 0x20, 0x40, 0x40,
			0xF0, 0x90, 0xF0, 0x90, 0xF0,
			0xF0, 0x90, 0xF0, 0x10, 0xF0,
			0xF0, 0x90, 0xF0, 0x90, 0x90,
			0xE0, 0x90, 0xE0, 0x90, 0xE0,
			0xF0, 0x80, 0x80, 0x80, 0xF0,
			0xE0, 0x90, 0x90, 0x90, 0xE0,
			0xF0, 0x80, 0xF0, 0x80, 0xF0,
			0xF0, 0x80, 0xF0, 0x80, 0x80
		};
	public:
		RAM();

		//Loads Chip 8 rom at romPath into RAM
		void loadRomIntoRAM(std::string romPath);

		//Returns instruction (4 byte) found at index
		unsigned int getInstructionAt(unsigned int index);

		//Returns data (2 byte) found at index
		unsigned char getDataAt(unsigned int index);

		//Returns start of digit sprite data
		unsigned int getSpriteDigitIndex();

		//Sets data at memory address
		void setDataAt(unsigned int index, unsigned char data);
		
};